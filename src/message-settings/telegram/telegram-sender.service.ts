import { Injectable, Logger } from '@nestjs/common';
import { TelegramSettings } from './telegram-settings.entity';
import { TelegramBotService } from '../../telegram-bot/telegram-bot.service';
import { Webhook } from 'src/webhook/webhook.entity';
import { MessageTemplate } from 'src/message-template/message-template.entity';

@Injectable()
export class TelegramSenderService {
  private readonly logger = new Logger(TelegramSenderService.name);

  constructor(private telegramBotService: TelegramBotService) {}

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ webhook –≤ Telegram
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   */
  async sendWebhookNotification(
    webhook: Webhook,
    settings: TelegramSettings | null,
    template: MessageTemplate | null,
  ): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ Telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!settings?.isEnabled || !settings?.chatId) {
        this.logger.log(
          `Telegram –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${webhook.user_id}`,
        );
        return;
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
      const messageText = template
        ? this.formatMessage(template.messageTemplate, webhook)
        : this.getDefaultMessage(webhook);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.telegramBotService.sendPersonalizedMessage(
        webhook.user_id,
        messageText,
      );

      this.logger.log(
        `–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${webhook.user_id}`,
      );
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${webhook.user_id}: ${error.message}`,
      );
      // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É webhook
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É
   */
  private formatMessage(template: string, webhook: Webhook): string {
    return template.replace(/\{\{([^}]+)\}\}/g, (match, key) => {
      const cleanKey = key.trim();
      const keys = cleanKey.split('.');

      let value: any = webhook;
      for (const k of keys) {
        if (value && typeof value === 'object' && k in value) {
          value = value[k];
        } else {
          return match; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π placeholder –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
        }
      }

      // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ null, undefined –∏–ª–∏ –æ–±—ä–µ–∫—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
      if (
        value === null ||
        value === undefined ||
        (typeof value === 'object' && !Array.isArray(value))
      ) {
        return '';
      }

      return String(value);
    });
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (fallback)
   */
  private getDefaultMessage(webhook: Webhook): string {
    let message = `üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ "${webhook.siteName}"\n`;
    message += `üìã –§–æ—Ä–º–∞: ${webhook.formName}\n`;
    message += `üïê –í—Ä–µ–º—è: ${webhook.createdAt.toLocaleString('ru-RU')}\n\n`;

    if (webhook.data && Object.keys(webhook.data).length > 0) {
      message += `üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:\n`;
      Object.entries(webhook.data).forEach(([key, value]) => {
        message += `‚Ä¢ ${key}: ${value}\n`;
      });
      message += `\n`;
    }

    if (
      webhook.advertisingParams &&
      Object.keys(webhook.advertisingParams).length > 0
    ) {
      message += `üìä –†–µ–∫–ª–∞–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n`;
      Object.entries(webhook.advertisingParams).forEach(([key, value]) => {
        message += `‚Ä¢ ${key}: ${value}\n`;
      });
    }

    return message;
  }
}
