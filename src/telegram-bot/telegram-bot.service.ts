import {
  Injectable,
  Logger,
  NotFoundException,
  BadRequestException,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from '../user/user.entity';
import { TelegramAuthToken } from './telegram-auth-token.entity';
import { randomBytes } from 'crypto';
import { JwtService } from '@nestjs/jwt';
import { Observable, Subject, interval, map, filter } from 'rxjs';
import { MessageEvent } from '@nestjs/common';

@Injectable()
export class TelegramBotService {
  private readonly logger = new Logger(TelegramBotService.name);
  private readonly statusSubject = new Subject<{
    userId: string;
    isAuthorized: boolean;
  }>();

  constructor(
    @InjectRepository(User)
    private userRepository: Repository<User>,
    @InjectRepository(TelegramAuthToken)
    private telegramAuthTokenRepository: Repository<TelegramAuthToken>,
    private jwtService: JwtService,
  ) {}

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createAuthToken(
    userId: string,
  ): Promise<{ token: string; authLink: string }> {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    const token = randomBytes(32).toString('hex');
    const botUsername = process.env.TELEGRAM_BOT_USERNAME;
    const authLink = `https://t.me/${botUsername}?start=${token}`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const authToken = this.telegramAuthTokenRepository.create({
      user_id: userId,
      token,
      expiresAt: new Date(Date.now() + 60 * 60 * 1000), // 1 —á–∞—Å
    });

    await this.telegramAuthTokenRepository.save(authToken);

    this.logger.log(
      `–°–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${token}`,
    );

    return { token, authLink };
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ç–æ–∫–µ–Ω–æ–º
  async handleStartCommand(
    chatId: string,
    token: string,
    userInfo: any,
  ): Promise<string> {
    this.logger.log(
      `–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ç–æ–∫–µ–Ω–æ–º ${token} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`,
    );

    try {
      // –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const authToken = await this.telegramAuthTokenRepository.findOne({
        where: { token },
        relations: ['user'],
      });

      if (!authToken) {
        return '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
      if (authToken.expiresAt < new Date()) {
        return '‚è∞ –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ —Å–∏—Å—Ç–µ–º–µ.';
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ —Ç–æ–∫–µ–Ω
      if (authToken.isUsed) {
        return '‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ï—Å–ª–∏ –≤—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É.';
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingUser = await this.userRepository.findOne({
        where: { id: authToken.user_id },
        select: ['isTelegramEnabled', 'telegramChatId'],
      });

      if (existingUser && existingUser.telegramChatId) {
        return '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É.';
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram
      authToken.isUsed = true;
      authToken.telegramChatId = chatId;
      authToken.telegramUsername = userInfo.username;
      authToken.usedAt = new Date();

      await this.telegramAuthTokenRepository.save(authToken);

      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.userRepository.findOne({
        where: { id: authToken.user_id },
      });

      if (user) {
        user.isTelegramEnabled = true;
        user.telegramChatId = chatId;
        user.telegramUsername = userInfo.username;
        user.telegramSettings = {
          username: userInfo.username,
          firstName: userInfo.first_name,
          lastAuthDate: new Date().toISOString(),
        };
        await this.userRepository.save(user);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SSE —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        this.statusSubject.next({
          userId: authToken.user_id,
          isAuthorized: true,
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      return `‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${authToken.user.name}\nüìß Email: ${authToken.user.email}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ —Å–∏—Å—Ç–µ–º–µ.`;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      return '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /start
  async handleStartCommandWithoutToken(
    chatId: string,
    userInfo: any,
  ): Promise<string> {
    this.logger.log(
      `–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`,
    );

    return `üëã –ü—Ä–∏–≤–µ—Ç, ${
      userInfo.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    }!\n\n–Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ Omnicore.\n\n–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Omnicore.`;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  async handleTextMessage(
    chatId: string,
    text: string,
    userInfo: any,
  ): Promise<string> {
    this.logger.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}: ${text}`);

    return `‚ÑπÔ∏è –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Å—Å—ã–ª–∫–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.`;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async sendPersonalizedMessage(
    userId: string,
    message: string,
  ): Promise<void> {
    const user = await this.userRepository.findOne({
      where: { id: userId },
      select: ['isTelegramEnabled', 'telegramChatId'],
    });

    if (!user?.isTelegramEnabled || !user?.telegramChatId) {
      this.logger.warn(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª Telegram –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`,
      );
      throw new Error(
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª Telegram –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      );
    }

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      if (!botToken) {
        throw new Error(
          'TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è',
        );
      }

      const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
      const response = await fetch(telegramApiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: user.telegramChatId,
          text: message,
          parse_mode: 'HTML',
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          `Telegram API error: ${errorData.description || response.statusText}`,
        );
      }

      const result = await response.json();
      this.logger.log(
        `–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} (chatId: ${user.telegramChatId}), messageId: ${result.result.message_id}`,
      );
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${error.message}`,
      );
      throw error;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createOrUpdateTelegramSettings(
    userId: string,
    chatId: string,
    userInfo: any,
  ): Promise<User> {
    const user = await this.userRepository.findOne({
      where: { id: userId },
    });

    if (!user) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.isTelegramEnabled = true;
    user.telegramChatId = chatId;
    user.telegramUsername = userInfo.username;
    user.telegramSettings = {
      ...user.telegramSettings,
      username: userInfo.username,
      firstName: userInfo.first_name,
      lastName: userInfo.last_name,
      lastAuthDate: new Date().toISOString(),
    };

    return this.userRepository.save(user);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Telegram
  async isUserAuthorizedInTelegram(userId: string): Promise<boolean> {
    const user = await this.userRepository.findOne({
      where: { id: userId },
      select: ['isTelegramEnabled', 'telegramChatId'],
    });

    return !!(user?.isTelegramEnabled && user?.telegramChatId);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserChatId(userId: string): Promise<string | null> {
    const user = await this.userRepository.findOne({
      where: { id: userId },
      select: ['isTelegramEnabled', 'telegramChatId'],
    });

    return user?.isTelegramEnabled && user?.telegramChatId
      ? user.telegramChatId
      : null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getActiveTokens(userId: string): Promise<TelegramAuthToken[]> {
    return this.telegramAuthTokenRepository.find({
      where: {
        user_id: userId,
        isUsed: false,
        expiresAt: new Date(), // –¢–æ–∫–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–∏
      },
      order: { createdAt: 'DESC' },
    });
  }

  // –û—Ç–∑—ã–≤ —Ç–æ–∫–µ–Ω–∞
  async revokeToken(tokenId: string, userId: string): Promise<void> {
    const result = await this.telegramAuthTokenRepository.update(
      {
        id: tokenId,
        user_id: userId,
        isUsed: false,
      },
      {
        isUsed: true,
        usedAt: new Date(),
      },
    );

    if (result.affected === 0) {
      throw new NotFoundException('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω');
    }
  }

  // SSE stream –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  getStatusStream(userId: string): Observable<MessageEvent> {
    return this.statusSubject.asObservable().pipe(
      filter((status) => status.userId === userId),
      map((status) => ({
        data: JSON.stringify({
          type: 'telegram_auth_status',
          isAuthorized: status.isAuthorized,
          timestamp: new Date().toISOString(),
        }),
      })),
    );
  }
}
