import { Injectable, Logger, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { MessageTemplate, TemplateType } from './message-template.entity';
import { Webhook } from 'src/webhook/webhook.entity';
import { MessageFieldsService } from 'src/message-fields/message-fields.service';

@Injectable()
export class MessageTemplateService {
  private readonly logger = new Logger(MessageTemplateService.name);

  constructor(
    private readonly messageFieldsService: MessageFieldsService,
    @InjectRepository(MessageTemplate)
    private messageTemplateRepository: Repository<MessageTemplate>,
  ) {}

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async createTemplate(
    userId: string,
    templateData: {
      name: string;
      type: TemplateType;
      template: string;
    },
  ): Promise<MessageTemplate> {
    // this.logger.log(
    //   'Creating template with data:',
    //   JSON.stringify(templateData, null, 2),
    // );
    // this.logger.log('User ID:', userId);

    // –°–æ–∑–¥–∞–µ–º entity –Ω–∞–ø—Ä—è–º—É—é
    const template = new MessageTemplate();
    template.type = templateData.type;
    template.messageTemplate = templateData.template || '';
    template.user_id = userId;

    const savedTemplate = await this.messageTemplateRepository.save(template);

    return savedTemplate;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserTemplates(
    userId: string,
    type?: TemplateType,
  ): Promise<MessageTemplate[]> {
    const where: any = { user_id: userId, isActive: true };
    if (type) {
      where.type = type;
    }

    return this.messageTemplateRepository.find({
      where,
      order: { createdAt: 'DESC' },
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getTemplates(userId: string): Promise<{
    userTemplates: MessageTemplate[];
    variablesFromMessages: string[];
  }> {
    const getUserFields = await this.messageFieldsService.getFieldsByUserId(
      userId,
    );

    // this.logger.log(
    //   'getExampleMessages=',
    //   JSON.stringify(getUserFields, null, 2),
    // );
    const userTemplates = await this.messageTemplateRepository.find({
      where: { user_id: userId },
    });

    return {
      userTemplates,
      variablesFromMessages: getUserFields.fields,
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateTemplate(
    userId: string,
    type: TemplateType,
    messageTemplate: string,
  ): Promise<void> {
    const templateData = await this.messageTemplateRepository.findOne({
      where: { type: type, user_id: userId },
    });

    if (!templateData) {
      throw new NotFoundException('–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    this.messageTemplateRepository.save({
      ...templateData,
      messageTemplate: messageTemplate,
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–∏–ø–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
   */
  async getDefaultTemplate(
    userId: string,
    type: TemplateType,
  ): Promise<MessageTemplate | null> {
    return this.messageTemplateRepository.findOne({
      where: {
        user_id: userId,
        type,
      },
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É
   */
  async formatMessage(
    userId: string,
    type: TemplateType,
    webhook: Webhook,
  ): Promise<string> {
    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    let template = await this.getDefaultTemplate(userId, type);

    if (!template) {
      const templates = await this.getUserTemplates(userId, type);
      template = templates[0];
    }

    if (!template) {
      // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
      return this.getDefaultMessageFormat(webhook);
    }
    return this.replaceTemplateVariables(template.messageTemplate, webhook);
  }

  /* —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω–µ */
  private replaceTemplateVariables(template, data) {
    return template.replace(/\{\{([^}]+)\}\}/g, (match, key) => {
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –∫–ª—é—á–∞
      const cleanKey = key.trim();

      // –†–∞–∑–±–∏–≤–∞–µ–º –∫–ª—é—á –ø–æ —Ç–æ—á–∫–∞–º –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
      const keys = cleanKey.split('.');

      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞
      let value = data;
      for (const k of keys) {
        if (value && typeof value === 'object' && k in value) {
          value = value[k];
        } else {
          // –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π placeholder
          return match;
        }
      }

      // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ undefined, null –∏–ª–∏ –æ–±—ä–µ–∫—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
      if (
        value === null ||
        value === undefined ||
        (typeof value === 'object' && !Array.isArray(value))
      ) {
        return '';
      }

      return String(value);
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞
  // private getNestedValue(obj, path) {
  //   // –ï—Å–ª–∏ –ø—É—Ç—å –±–µ–∑ —Ç–æ—á–µ–∫ - –∏—â–µ–º –ø—Ä—è–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
  //   if (!path.includes('.')) {
  //     return obj[path];
  //   }

  //   // –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å –ø–æ —Ç–æ—á–∫–∞–º
  //   const keys = path.split('.');
  //   let current = obj;

  //   // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–ª—é—á–∞–º –ø—É—Ç–∏
  //   for (const key of keys) {
  //     if (current && typeof current === 'object' && key in current) {
  //       current = current[key];
  //     } else {
  //       return undefined; // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω
  //     }
  //   }

  //   return current;
  // }

  /**
   * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (fallback)
   */
  private getDefaultMessageFormat(webhookData: {
    siteName: string;
    formName: string;
    data: Record<string, any>;
    advertisingParams?: Record<string, any>;
    createdAt: Date;
  }): string {
    let message = `üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ "${webhookData.siteName}"\n`;
    message += `üìã –§–æ—Ä–º–∞: ${webhookData.formName}\n`;
    message += `üïê –í—Ä–µ–º—è: ${webhookData.createdAt.toLocaleString('ru-RU')}\n\n`;

    if (webhookData.data && Object.keys(webhookData.data).length > 0) {
      message += `üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:\n`;
      Object.entries(webhookData.data).forEach(([key, value]) => {
        message += `‚Ä¢ ${key}: ${value}\n`;
      });
      message += `\n`;
    }

    if (
      webhookData.advertisingParams &&
      Object.keys(webhookData.advertisingParams).length > 0
    ) {
      message += `üìä –†–µ–∫–ª–∞–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n`;
      Object.entries(webhookData.advertisingParams).forEach(([key, value]) => {
        message += `‚Ä¢ ${key}: ${value}\n`;
      });
    }

    return message;
  }
}
