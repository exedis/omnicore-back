import { Injectable, Logger, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { MessageTemplate, TemplateType } from './message-template.entity';
import { User } from '../user/user.entity';
import { FieldMapping } from '@type/user';

@Injectable()
export class MessageTemplateService {
  private readonly logger = new Logger(MessageTemplateService.name);

  constructor(
    @InjectRepository(MessageTemplate)
    private messageTemplateRepository: Repository<MessageTemplate>,
    @InjectRepository(User)
    private userRepository: Repository<User>,
  ) {}

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async createTemplate(
    userId: string,
    templateData: {
      name: string;
      type: TemplateType;
      isDefault?: boolean;
      template: string;
    },
  ): Promise<MessageTemplate> {
    // this.logger.log(
    //   'Creating template with data:',
    //   JSON.stringify(templateData, null, 2),
    // );
    // this.logger.log('User ID:', userId);

    // –ï—Å–ª–∏ —ç—Ç–æ —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ —Å –¥—Ä—É–≥–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
    if (templateData.isDefault) {
      await this.messageTemplateRepository.update(
        { user_id: userId, type: templateData.type },
        { isDefault: false },
      );
    }

    // –°–æ–∑–¥–∞–µ–º entity –Ω–∞–ø—Ä—è–º—É—é
    const template = new MessageTemplate();
    template.name = templateData.name || 'Unnamed Template';
    template.type = templateData.type;
    template.template = templateData.template || '';
    template.isDefault = templateData.isDefault || false;
    template.isActive = true;
    template.user_id = userId;

    // this.logger.log(
    //   'Created template entity:',
    //   JSON.stringify(template, null, 2),
    // );

    const savedTemplate = await this.messageTemplateRepository.save(template);

    // this.logger.log('Template saved successfully:', savedTemplate.id);

    return savedTemplate;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserTemplates(
    userId: string,
    type?: TemplateType,
  ): Promise<MessageTemplate[]> {
    const where: any = { user_id: userId, isActive: true };
    if (type) {
      where.type = type;
    }

    return this.messageTemplateRepository.find({
      where,
      order: { isDefault: 'DESC', createdAt: 'DESC' },
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getTemplateById(
    userId: string,
    templateId: string,
  ): Promise<MessageTemplate> {
    const where: any = { id: templateId, user_id: userId, isActive: true };

    return this.messageTemplateRepository.findOne({
      where,
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–∏–ø–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
   */
  async getDefaultTemplate(
    userId: string,
    type: TemplateType,
  ): Promise<MessageTemplate | null> {
    return this.messageTemplateRepository.findOne({
      where: {
        user_id: userId,
        type,
        isDefault: true,
        isActive: true,
      },
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —à–∞–±–ª–æ–Ω
   */
  async updateTemplate(
    templateId: string,
    userId: string,
    updateData: {
      name?: string;
      template?: string;
      fieldMappings?: FieldMapping[];
      isDefault?: boolean;
      isActive?: boolean;
    },
  ): Promise<MessageTemplate> {
    const template = await this.messageTemplateRepository.findOne({
      where: { id: templateId, user_id: userId },
    });

    if (!template) {
      throw new NotFoundException('–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ —Å –¥—Ä—É–≥–∏—Ö
    if (updateData.isDefault) {
      await this.messageTemplateRepository.update(
        { user_id: userId, type: template.type },
        { isDefault: false },
      );
    }

    Object.assign(template, updateData);
    return this.messageTemplateRepository.save(template);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
   */
  async deleteTemplate(templateId: string, userId: string): Promise<void> {
    const result = await this.messageTemplateRepository.update(
      { id: templateId, user_id: userId },
      { isActive: false },
    );

    if (result.affected === 0) {
      throw new NotFoundException('–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É
   */
  async formatMessage(
    userId: string,
    type: TemplateType,
    webhookData: {
      siteName: string;
      formName: string;
      data: Record<string, any>;
      advertisingParams?: Record<string, any>;
      createdAt: Date;
    },
  ): Promise<string> {
    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    let template = await this.getDefaultTemplate(userId, type);

    if (!template) {
      const templates = await this.getUserTemplates(userId, type);
      template = templates[0];
    }

    if (!template) {
      // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
      return this.getDefaultMessageFormat(webhookData);
    }

    return this.processTemplate(template.template, webhookData);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–±–ª–æ–Ω —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
   */
  private processTemplate(
    template: string,
    webhookData: {
      siteName: string;
      formName: string;
      data: Record<string, any>;
      advertisingParams?: Record<string, any>;
      createdAt: Date;
    },
    fieldMappings: FieldMapping[] = [],
  ): string {
    let result = template;

    // –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const variables = {
      siteName: webhookData.siteName,
      formName: webhookData.formName,
      time: webhookData.createdAt.toLocaleString('ru-RU'),
      date: webhookData.createdAt.toLocaleDateString('ru-RU'),
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
    const selectedMappings = fieldMappings.filter((m) => m.isSelected);
    selectedMappings.forEach((mapping) => {
      const value = this.getFieldValue(webhookData.data, mapping.webhookField);
      variables[mapping.displayTitle] = value || '';
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (webhookData.advertisingParams) {
      Object.entries(webhookData.advertisingParams).forEach(([key, value]) => {
        variables[`utm_${key}`] = value;
      });
    }

    // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–µ
    Object.entries(variables).forEach(([key, value]) => {
      const regex = new RegExp(`{{${key}}}`, 'g');
      result = result.replace(regex, String(value));
    });

    return result;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –ø–æ –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "user.name")
   */
  private getFieldValue(data: Record<string, any>, fieldPath: string): any {
    const parts = fieldPath.split('.');
    let value: any = data;

    for (const part of parts) {
      if (
        typeof value === 'object' &&
        value !== null &&
        !Array.isArray(value)
      ) {
        value = value[part];
      } else {
        return undefined;
      }
    }

    return value;
  }

  /**
   * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (fallback)
   */
  private getDefaultMessageFormat(webhookData: {
    siteName: string;
    formName: string;
    data: Record<string, any>;
    advertisingParams?: Record<string, any>;
    createdAt: Date;
  }): string {
    let message = `üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ "${webhookData.siteName}"\n`;
    message += `üìã –§–æ—Ä–º–∞: ${webhookData.formName}\n`;
    message += `üïê –í—Ä–µ–º—è: ${webhookData.createdAt.toLocaleString('ru-RU')}\n\n`;

    if (webhookData.data && Object.keys(webhookData.data).length > 0) {
      message += `üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:\n`;
      Object.entries(webhookData.data).forEach(([key, value]) => {
        message += `‚Ä¢ ${key}: ${value}\n`;
      });
      message += `\n`;
    }

    if (
      webhookData.advertisingParams &&
      Object.keys(webhookData.advertisingParams).length > 0
    ) {
      message += `üìä –†–µ–∫–ª–∞–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n`;
      Object.entries(webhookData.advertisingParams).forEach(([key, value]) => {
        message += `‚Ä¢ ${key}: ${value}\n`;
      });
    }

    return message;
  }
}
